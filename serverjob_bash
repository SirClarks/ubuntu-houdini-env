#!/bin/bash

# help check
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
  echo -e "Usage: sjob [job name] [shotname]\n\n--Additional arguments--\nList jobs: \n\tjob -list \n\tjob --list \n\tjob --jl\nList jobs and shots: \n\tjob -listfull \n\tjob --listfull \n\tjob -lf \nJob into last worked shot: \n\tjob -l -l \n\tjob -l \n\tjob --last\nShow job/shot history: \n\tjob -hh \n\tjob --history\nShow help: \n\tjob -h \n\tjob --help \nJob in using alternative enviornemnt \n\tjob [job] [shot] --alt"
  exit 0
fi

# Set default directory, this will not function if using symlinks to call scripts
SCRIPTDIR=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )

# Source config settings, point this at your config.sh file
source $SCRIPTDIR/config_bash

# if error on source config
if [ $? -eq 0 ]; then
    # echo "Config.sh loaded"
    :
else
    echo -e "\n-----CONFIG ERROR-----\nCannot find config.sh doublecheck the filepath \nand/or check config.sh for any typos"
    exit 0
fi

# sets server directory as project path
PROJPATH=$SERVERDIR

# list jobs
if [ "$1" == "-list" ] || [ "$1" == "--list" ] || [ "$1" == "-jl" ]; then
  echo "Job List:"
  IFS=$'\n'
  projarray=( $(find $PROJPATH -mindepth 1 -maxdepth 1 -type d -printf '%f\n') )
  for i in ${projarray[@]}
  do
    echo $i
  done
  exit 0
fi

# list jobs and shots
if [ "$1" == "-listfull" ] || [ "$1" == "--listfull" ] || [ "$1" == "-lf" ]; then
  echo "Job/Shot List:"
  IFS=$'\n'
  projarray=( $(find $PROJPATH -mindepth 1 -maxdepth 1 -type d -printf '%f\n') )
  for i in ${projarray[@]}
  do
    echo $i
    temparray=( $(find $PROJPATH/$i -mindepth 1 -maxdepth 1 -type d -printf '%f\n') )
    for j in ${temparray[@]}
    do
      echo -e "  $j"
    done
    unset temparray
  done
  exit 0
fi

# history check
if [ "$1" == "-hh" ] || [ "$1" == "--history" ]; then
  echo "Last 20 Shots: "
  echo "`tail -n 15 $UTILPATH/ENV/history.txt`"
  exit 0
fi

# last job/shot load via history.txt else use the two typed arguments
if [ "$1" == "-l" ] || [ "$1" == "-l -l" ] || [ "$1" == "--last" ]; then
  LAST=$( tail -n 1 $UTILPATH/ENV/history.txt )
  echo "Jobbing into last shot: $LAST"
  read -r -a array <<< "$LAST"
  JOB=${array[1]}
  SHOT=${array[2]}
else
  JOB=${1?Error: no job name given}
  SHOT=${2?Error: no shot given}
fi

# error check just in case for -l call error
if [ -z "$JOB" ] || [ -z "$SHOT" ]; then
  echo "JOB and/or SHOT is empty, something went wrong, most likely something went wrong when trying to use --last or -l. Try manually entering the job / shot. Otherwise please take a look at the scripts"
  exit 0
fi



# set main path
HPATH=$PROJPATH/$JOB/$SHOT/

if cd $HPATH; then
  echo -e "\n----Success---\nEntering $JOB/$SHOT"
else
  echo "Could not find job/shot, run jobcreate or shotcreate if needed" 1>&2
  exit 1
fi

# for later logging
LOGJOB=$JOB

echo "Job set to: $JOB"
echo "Shot set to: $SHOT"
echo "Project path set to: $HPATH"

# set env
if [ "$3" == "-alt" ]; then
  echo "Using alternative enviornment"
  source $HENVPATH2
else
  source $HENVPATH
fi

# set variable paths
export SHOT=$SHOT
export JOB=$HPATH
export USER=$USER

# set preferences
export HOUDINI_NO_START_PAGE_SPLASH=1
export HOUDINI_VERBOSE_ERROR=1
export HOUDINI_DISABLE_SAVE_THUMB=1
export HOUDINI_SIMPLIFIED_NODE_NAMES=1
# export HOUDINI_BACKUP_DIR="$HPATH/houdini/hip/backup"
export HOUDINI_OTLSCAN_PATH=$HPATH/build/otls/
echo "Houdini OTLs path appended at: $HOUDINI_OTLSCAN_PATH"
echo "WORKING ON THE SERVER at: $HPATH"

# keeps the shell window open
$SHELL
